#!/bin/bash
set -e # D·ª´ng script n·∫øu c√≥ l·ªói
export DOCKER_BUILDKIT=1

ROOT_DIR=~/n8n-docker
read -p "Nh·∫≠p t√™n Tunnel Cloudflare c·∫ßn s·ª≠ d·ª•ng/t·∫°o: " CLOUDFLARE_TUNNEL_NAME

# C·∫≠p nh·∫≠t package list
sudo apt-get update

# Ki·ªÉm tra v√† c√†i ƒë·∫∑t dependencies
echo "üîé Ki·ªÉm tra dependencies..."
if ! command -v jq >/dev/null 2>&1; then
    echo "‚ùå jq ch∆∞a c√†i. ƒêang c√†i ƒë·∫∑t..."
    sudo apt-get install -y jq || { echo "‚ùå C√†i jq th·∫•t b·∫°i"; exit 1; }
fi

if ! command -v docker >/dev/null 2>&1; then
    echo "‚ùå Docker ch∆∞a c√†i. ƒêang c√†i ƒë·∫∑t..."
    sudo apt-get install -y docker.io || { echo "‚ùå C√†i Docker th·∫•t b·∫°i"; exit 1; }
fi

# ƒê·∫£m b·∫£o Docker daemon ho·∫°t ƒë·ªông
if ! sudo systemctl is-active --quiet docker; then
    echo "‚ùå Docker daemon kh√¥ng ho·∫°t ƒë·ªông. ƒêang kh·ªüi ƒë·ªông..."
    sudo systemctl start docker
fi
sudo systemctl enable docker

# Th√™m user v√†o nh√≥m docker (n·∫øu ch∆∞a)
if ! groups $USER | grep -q '\bdocker\b'; then
    echo "‚ûï Th√™m user '$USER' v√†o nh√≥m docker..."
    sudo usermod -aG docker $USER
    echo "‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng xu·∫•t ƒëƒÉng nh·∫≠p l·∫°i HO·∫∂C ch·∫°y: newgrp docker"
fi

# Docker Compose
if ! command -v docker-compose >/dev/null 2>&1; then
    echo "‚ùå Docker Compose ch∆∞a c√†i. ƒêang c√†i ƒë·∫∑t..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose || { echo "‚ùå T·∫£i Docker Compose th·∫•t b·∫°i"; exit 1; }
    sudo chmod +x /usr/local/bin/docker-compose || { echo "‚ùå C√†i Docker Compose th·∫•t b·∫°i"; exit 1; }
fi

echo "üöÄ ƒêang t·∫°o th∆∞ m·ª•c d·ª± √°n t·∫°i $ROOT_DIR..."
mkdir -p $ROOT_DIR/cloudflared
cd $ROOT_DIR

# Nh·∫≠p v√† ki·ªÉm tra domain
[ -t 0 ] || exec < /dev/tty
read -p "üåê Nh·∫≠p t√™n mi·ªÅn (VD: n8n.domain.com): " DOMAIN_INPUT
DOMAIN=$(echo "$DOMAIN_INPUT" | sed 's~^https\?://~~')

# Ki·ªÉm tra t√™n mi·ªÅn
if ! echo "$DOMAIN" | grep -qE '^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}$'; then
    echo "‚ùå T√™n mi·ªÅn kh√¥ng h·ª£p l·ªá!"
    exit 1
fi

N8N_PROTOCOL=$(echo "$DOMAIN_INPUT" | grep -Eo '^https?://' | sed 's~://~~')
if [ -z "$N8N_PROTOCOL" ]; then
    N8N_PROTOCOL="https"
fi

# Nh·∫≠p API Token (·∫©n input)
echo "üîë API Token c·∫ßn quy·ªÅn Zone:Read, Zone:DNS:Edit"
printf "üîë Nh·∫≠p API Token Cloudflare: "
read CF_API_TOKEN

# Ki·ªÉm tra cloudflared
echo "üîé Ki·ªÉm tra cloudflared..."
if ! command -v cloudflared &>/dev/null; then
    echo "‚ùå Cloudflared ch∆∞a c√†i. ƒêang c√†i ƒë·∫∑t..."
    if [[ $(uname -s) == "Linux" && $(dpkg --print-architecture) == "amd64" ]]; then
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo dpkg -i cloudflared-linux-amd64.deb || { echo "‚ùå C√†i cloudflared th·∫•t b·∫°i"; exit 1; }
        rm cloudflared-linux-amd64.deb
        sudo cloudflared --version || { echo "‚ùå Ki·ªÉm tra cloudflared th·∫•t b·∫°i"; exit 1; }
    else
        echo "‚ùå H·ªá th·ªëng kh√¥ng h·ªó tr·ª£ c√†i t·ª± ƒë·ªông. C√†i cloudflared th·ªß c√¥ng:"
        echo "wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
        echo "chmod +x cloudflared-linux-amd64 && sudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared"
        exit 1
    fi
else
    echo "‚úÖ Cloudflared ƒë√£ c√†i."
fi

# ƒêƒÉng nh·∫≠p Cloudflare
CERT_FILE="$HOME/.cloudflared/cert.pem"

# Ki·ªÉm tra certificate ƒë√£ t·ªìn t·∫°i
if [ ! -f "$CERT_FILE" ]; then
    echo "üîê ƒêƒÉng nh·∫≠p Cloudflare..."
    cloudflared tunnel login || { echo "‚ùå ƒêƒÉng nh·∫≠p Cloudflare th·∫•t b·∫°i"; exit 1; }
else
    echo "‚úÖ Certificate Cloudflare ƒë√£ t·ªìn t·∫°i."
fi

# Ki·ªÉm tra Tunnel ƒë√£ t·ªìn t·∫°i
TUNNEL_EXISTS=$(cloudflared tunnel list | grep -w "$CLOUDFLARE_TUNNEL_NAME" | wc -l)

if [ "$TUNNEL_EXISTS" -eq 0 ]; then
    # Tunnel ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
    echo "üî® T·∫°o Tunnel m·ªõi: $CLOUDFLARE_TUNNEL_NAME..."
    cloudflared tunnel create $CLOUDFLARE_TUNNEL_NAME || { echo "‚ùå T·∫°o tunnel th·∫•t b·∫°i"; exit 1; }
else
    echo "‚úÖ Tunnel $CLOUDFLARE_TUNNEL_NAME ƒë√£ t·ªìn t·∫°i, s·∫Ω s·ª≠ d·ª•ng tunnel n√†y."
fi

# L·∫•y Tunnel ID
TUNNEL_ID=$(cloudflared tunnel list | grep -w "$CLOUDFLARE_TUNNEL_NAME" | awk '{print $1}' | head -n 1)
if [ -z "$TUNNEL_ID" ]; then
    echo "‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c Tunnel ID"
    exit 1
fi
echo "‚úÖ Tunnel ID: $TUNNEL_ID"

# Copy credentials
CREDENTIALS_SOURCE_FILE="$HOME/.cloudflared/${TUNNEL_ID}.json"
CREDENTIALS_DEST_FILE="$ROOT_DIR/cloudflared/${TUNNEL_ID}.json"

# X√°c ƒë·ªãnh Credential c·∫ßn copy t·ªìn t·∫°i hay kh√¥ng
if [ ! -f "$CREDENTIALS_SOURCE_FILE" ]; then
    echo "‚ùå File credentials kh√¥ng t·ªìn t·∫°i: $CREDENTIALS_SOURCE_FILE"
    exit 1
fi

# Copy credentials n·∫øu ch∆∞a t·ªìn t·∫°i
if [ ! -f "$CREDENTIALS_DEST_FILE" ]; then
    cp "$CREDENTIALS_SOURCE_FILE" "$CREDENTIALS_DEST_FILE" || { echo "‚ùå Kh√¥ng th·ªÉ copy credentials"; exit 1; }
    echo "‚úÖ ƒê√£ copy credentials"
else
    echo "‚úÖ Credentials ƒë√£ t·ªìn t·∫°i"
fi

# Ghi file .env
cat <<EOL > .env
# .env c·∫•u h√¨nh n8n
N8N_PROTOCOL=${N8N_PROTOCOL}
N8N_HOST=${DOMAIN}
N8N_EDITOR_BASE_URL=${N8N_PROTOCOL}://${DOMAIN}
WEBHOOK_URL=${N8N_PROTOCOL}://${DOMAIN}
N8N_SECURE_COOKIE=false
GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
N8N_BASIC_AUTH_ACTIVE=false
EXECUTIONS_DATA_SAVE_ON_ERROR=all
EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
EXECUTIONS_DATA_SAVE_ON_PROGRESS=true
EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false
EXECUTIONS_DATA_PRUNE=true
N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
N8N_RUNNERS_ENABLED=true
EXECUTIONS_DATA_MAX_AGE=259200
# NODE_FUNCTION_ALLOW_BUILTIN=*
# NODE_FUNCTION_ALLOW_EXTERNAL=zca-js
CLOUDFLARED_TUNNEL_TOKEN=$(cloudflared tunnel token $CLOUDFLARE_TUNNEL_NAME)
EOL

# Ghi file docker-compose.yml
cat <<EOL > docker-compose.yml
#version: '3.8'

services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    ports:
      - "5678:5678"
    env_file: .env
    volumes:
      - n8n_data:/home/node/.n8n
    restart: always
    networks:
      - internal

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    command: tunnel --no-autoupdate run --token \${CLOUDFLARED_TUNNEL_TOKEN}
    volumes:
      - ./cloudflared:/etc/cloudflared
    restart: always
    networks:
      - internal

volumes:
  n8n_data:

networks:
  internal:
    driver: bridge
EOL

# Ki·ªÉm tra v√† c·∫≠p nh·∫≠t file c·∫•u h√¨nh cloudflared
CONFIG_FILE="$ROOT_DIR/cloudflared/config.yml"

# L·∫•y n·ªôi dung config hi·ªán t·∫°i n·∫øu c√≥
if [ -f "$CONFIG_FILE" ]; then
    echo "üîÑ ƒêang ƒë·ªçc file c·∫•u h√¨nh cloudflared hi·ªán t·∫°i..."
    # Ki·ªÉm tra xem hostname ƒë√£ t·ªìn t·∫°i trong config ch∆∞a
    HOSTNAME_EXISTS=$(grep -c "hostname: $DOMAIN" "$CONFIG_FILE" || true)
    
    if [ "$HOSTNAME_EXISTS" -gt 0 ]; then
        echo "‚úÖ Domain $DOMAIN ƒë√£ t·ªìn t·∫°i trong c·∫•u h√¨nh cloudflared."
    else
        echo "üîÑ ƒêang th√™m domain $DOMAIN v√†o c·∫•u h√¨nh cloudflared..."
        # T·∫°o file t·∫°m v·ªõi n·ªôi dung m·ªõi
        TEMP_CONFIG_FILE="$ROOT_DIR/cloudflared/config.yml.tmp"
        
        # L·∫•y d√≤ng ƒë·∫ßu ti√™n c√≥ ch·ª©a 'ingress:'
        INGRESS_LINE=$(grep -n "ingress:" "$CONFIG_FILE" | cut -d: -f1)
        
        # T√°ch file th√†nh hai ph·∫ßn: tr∆∞·ªõc v√† sau 'ingress:'
        head -n "$INGRESS_LINE" "$CONFIG_FILE" > "$TEMP_CONFIG_FILE"
        echo "  - hostname: $DOMAIN" >> "$TEMP_CONFIG_FILE"
        echo "    service: http://n8n:5678" >> "$TEMP_CONFIG_FILE"
        tail -n +$((INGRESS_LINE+1)) "$CONFIG_FILE" >> "$TEMP_CONFIG_FILE"
        
        # Thay th·∫ø file c≈© b·∫±ng file m·ªõi
        mv "$TEMP_CONFIG_FILE" "$CONFIG_FILE"
        echo "‚úÖ ƒê√£ th√™m c·∫•u h√¨nh cho domain $DOMAIN."
    fi
else
    # T·∫°o file c·∫•u h√¨nh m·ªõi
    echo "üîÑ T·∫°o file c·∫•u h√¨nh cloudflared m·ªõi..."
    cat <<EOL > "$CONFIG_FILE"
tunnel: ${TUNNEL_ID}
credentials-file: /etc/cloudflared/${TUNNEL_ID}.json

ingress:
  - hostname: ${DOMAIN}
    service: http://n8n:5678
  - service: http_status:404
EOL
    echo "‚úÖ ƒê√£ t·∫°o file c·∫•u h√¨nh cloudflared."
fi

echo "üåê T·∫°o b·∫£n ghi DNS tr·ªè t√™n mi·ªÅn v√†o Tunnel..."

# L·∫•y th√¥ng tin domain t·ª´ t√™n mi·ªÅn ƒë·∫ßy ƒë·ªß
DOMAIN_PARTS=(${DOMAIN//./ })
ROOT_DOMAIN="${DOMAIN_PARTS[*]: -2:2}"
ROOT_DOMAIN="${ROOT_DOMAIN// /.}"

# L·∫•y Zone ID
ZONE_INFO=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones" \
  -H "Authorization: Bearer ${CF_API_TOKEN}" \
  -H "Content-Type: application/json")

ZONE_ID=$(echo "$ZONE_INFO" | jq -r --arg name "$ROOT_DOMAIN" '.result[] | select(.name == $name) | .id')

if [ "$ZONE_ID" = "null" ] || [ -z "$ZONE_ID" ]; then
    echo "‚ùå Kh√¥ng t√¨m ƒë∆∞·ª£c Zone ID. Ki·ªÉm tra domain ho·∫∑c token."
    exit 1
fi

# Ki·ªÉm tra b·∫£n ghi DNS
DNS_CHECK=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records?name=${DOMAIN}" -H "Authorization: Bearer ${CF_API_TOKEN}" -H "Content-Type: application/json")
DNS_EXISTS=$(echo $DNS_CHECK | jq -r '.result | length')

if [ "$DNS_EXISTS" -gt 0 ]; then
    echo "‚ö†Ô∏è B·∫£n ghi DNS cho $DOMAIN ƒë√£ t·ªìn t·∫°i."
    
    # Ki·ªÉm tra n·ªôi dung b·∫£n ghi
    CURRENT_CONTENT=$(echo "$DNS_CHECK" | jq -r '.result[0].content')
    if [ "$CURRENT_CONTENT" = "${TUNNEL_ID}.cfargotunnel.com" ]; then
        echo "‚úÖ B·∫£n ghi DNS ƒë√£ tr·ªè ƒë√∫ng v√†o tunnel. Kh√¥ng c·∫ßn s·ª≠a."
    else
        echo "üîÑ B·∫£n ghi DNS kh√¥ng tr·ªè ƒë√∫ng tunnel. ƒêang c·∫≠p nh·∫≠t..."
        
        # L·∫•y DNS Record ID
        DNS_RECORD_ID=$(echo "$DNS_CHECK" | jq -r '.result[0].id')
        
        # C·∫≠p nh·∫≠t b·∫£n ghi DNS
        UPDATE_DNS=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records/${DNS_RECORD_ID}" \
          -H "Authorization: Bearer ${CF_API_TOKEN}" \
          -H "Content-Type: application/json" \
          --data '{
            "type":"CNAME",
            "name":"'"${DOMAIN}"'",
            "content":"'"${TUNNEL_ID}.cfargotunnel.com"'",
            "ttl":120,
            "proxied":true
          }')
        
        if [ "$(echo "$UPDATE_DNS" | jq -r '.success')" != "true" ]; then
            echo "‚ùå C·∫≠p nh·∫≠t b·∫£n ghi DNS th·∫•t b·∫°i: $(echo "$UPDATE_DNS" | jq -r '.errors')"
            exit 1
        fi
        echo "‚úÖ ƒê√£ c·∫≠p nh·∫≠t b·∫£n ghi DNS th√†nh c√¥ng!"
    fi
else
    # T·∫°o b·∫£n ghi CNAME m·ªõi
    echo "üîÑ ƒêang t·∫°o b·∫£n ghi DNS m·ªõi..."
    CREATE_DNS=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records" \
      -H "Authorization: Bearer ${CF_API_TOKEN}" \
      -H "Content-Type: application/json" \
      --data '{
        "type":"CNAME",
        "name":"'"${DOMAIN}"'",
        "content":"'"${TUNNEL_ID}.cfargotunnel.com"'",
        "ttl":120,
        "proxied":true
      }')

    SUCCESS=$(echo "$CREATE_DNS" | jq -r '.success')
    if [ "$SUCCESS" != "true" ]; then
        echo "‚ùå T·∫°o DNS th·∫•t b·∫°i: $(echo "$CREATE_DNS" | jq -r '.errors')"
        exit 1
    fi
    echo "‚úÖ ƒê√£ t·∫°o b·∫£n ghi DNS CNAME cho $DOMAIN!"
fi

echo "üëâ Setup n8n b·∫±ng docker-compose:"
cd ~/n8n-docker && docker-compose pull && docker-compose up -d --force-recreate

echo "üåü H·ªá th·ªëng n8n + cloudflared + DNS ready!"
echo "üåê Truy c·∫≠p n8n t·∫°i: ${N8N_PROTOCOL}://${DOMAIN}"
echo '‚ö†Ô∏è L∆∞u √Ω: N·∫øu Docker v·∫´n kh√¥ng ho·∫°t ƒë·ªông, h√£y ch·∫°y: newgrp docker ho·∫∑c sudo reboot'
