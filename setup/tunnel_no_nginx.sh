#!/bin/bash
set -e
export DOCKER_BUILDKIT=1

ROOT_DIR=~/n8n-docker
read -p "Nh·∫≠p t√™n Tunnel Cloudflare c·∫ßn t·∫°o/ƒë·ªìng b·ªô: " CLOUDFLARE_TUNNEL_NAME

# C·∫≠p nh·∫≠t package list
sudo apt-get update -qq

# Ki·ªÉm tra v√† c√†i ƒë·∫∑t dependencies
echo "üîé Ki·ªÉm tra dependencies..."
if ! command -v jq >/dev/null 2>&1; then
    echo "‚ùå jq ch∆∞a c√†i. ƒêang c√†i ƒë·∫∑t..."
    sudo apt-get install -y jq || { echo "‚ùå C√†i jq th·∫•t b·∫°i"; exit 1; }
fi

if ! command -v docker >/dev/null 2>&1; then
    echo "‚ùå Docker ch∆∞a c√†i. ƒêang c√†i ƒë·∫∑t..."
    sudo apt-get install -y docker.io || { echo "‚ùå C√†i Docker th·∫•t b·∫°i"; exit 1; }
fi

# ƒê·∫£m b·∫£o Docker daemon ho·∫°t ƒë·ªông
if ! sudo systemctl is-active --quiet docker; then
    echo "‚ùå Docker daemon kh√¥ng ho·∫°t ƒë·ªông. ƒêang kh·ªüi ƒë·ªông..."
    sudo systemctl start docker || { echo "‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Docker"; exit 1; }
fi
sudo systemctl enable docker

# Th√™m user v√†o nh√≥m docker (n·∫øu ch∆∞a)
if ! groups $USER | grep -q '\bdocker\b'; then
    echo "‚ûï Th√™m user '$USER' v√†o nh√≥m docker..."
    sudo usermod -aG docker $USER
    echo "‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng xu·∫•t ƒëƒÉng nh·∫≠p l·∫°i HO·∫∂C ch·∫°y: newgrp docker"
fi

# Docker Compose
if ! command -v docker-compose >/dev/null 2>&1; then
    echo "‚ùå Docker Compose ch∆∞a c√†i. ƒêang c√†i ƒë·∫∑t..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose || { echo "‚ùå T·∫£i Docker Compose th·∫•t b·∫°i"; exit 1; }
    sudo chmod +x /usr/local/bin/docker-compose || { echo "‚ùå C√†i Docker Compose th·∫•t b·∫°i"; exit 1; }
fi

# T·∫°o th∆∞ m·ª•c d·ª± √°n
echo "üöÄ ƒêang t·∫°o th∆∞ m·ª•c d·ª± √°n t·∫°i $ROOT_DIR..."
mkdir -p $ROOT_DIR/cloudflared
cd $ROOT_DIR

# Nh·∫≠p domain v√† validate
read -p "üåê Nh·∫≠p domain (VD: sub.domain.com ho·∫∑c domain.com): " DOMAIN_INPUT
DOMAIN=$(echo "$DOMAIN_INPUT" | sed -E 's~^https?://~~;s/\/$//')
if ! echo "$DOMAIN" | grep -qP '(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{1,63}(?<!-)\.)+[a-zA-Z]{2,63}$)'; then
    echo "‚ùå Domain kh√¥ng h·ª£p l·ªá!"
    exit 1
fi

# Nh·∫≠p Cloudflare API Token
echo "üîë API Token c·∫ßn quy·ªÅn: Zone.Zone, Zone.DNS, Tunnel:Edit"
read -p "Nh·∫≠p API Token Cloudflare: " CF_API_TOKEN
echo

# Ki·ªÉm tra v√† x·ª≠ l√Ω Cloudflared
echo "üîß Ki·ªÉm tra cloudflared..."
if ! command -v cloudflared &>/dev/null; then
    echo "‚ö†Ô∏è Cloudflared ch∆∞a c√†i ƒë·∫∑t. ƒêang c√†i ƒë·∫∑t..."
    sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb \
        -O /tmp/cloudflared.deb
    sudo dpkg -i /tmp/cloudflared.deb || { echo "‚ùå C√†i ƒë·∫∑t cloudflared th·∫•t b·∫°i"; exit 1; }
fi

# ƒêƒÉng nh·∫≠p Cloudflare
CERT_FILE="$HOME/.cloudflared/cert.pem"
if [ ! -f "$CERT_FILE" ]; then
    echo "üîê ƒêƒÉng nh·∫≠p Cloudflare..."
    cloudflared tunnel login || { echo "‚ùå ƒêƒÉng nh·∫≠p Cloudflare th·∫•t b·∫°i"; exit 1; }
fi

# X·ª≠ l√Ω Tunnel
echo "üîç Ki·ªÉm tra tunnel t·ªìn t·∫°i..."
TUNNEL_EXISTS=$(cloudflared tunnel list | grep -c "$CLOUDFLARE_TUNNEL_NAME" || true)
if [ "$TUNNEL_EXISTS" -eq 0 ]; then
    echo "üÜï T·∫°o tunnel m·ªõi: $CLOUDFLARE_TUNNEL_NAME..."
    cloudflared tunnel create "$CLOUDFLARE_TUNNEL_NAME" || { echo "‚ùå T·∫°o tunnel th·∫•t b·∫°i"; exit 1; }
else
    echo "‚úÖ Tunnel ƒë√£ t·ªìn t·∫°i: $CLOUDFLARE_TUNNEL_NAME"
fi

# L·∫•y Tunnel ID
TUNNEL_ID=$(cloudflared tunnel list | grep "$CLOUDFLARE_TUNNEL_NAME" | awk '{print $1}' | head -n 1)
[ -z "$TUNNEL_ID" ] && { echo "‚ùå Kh√¥ng t√¨m th·∫•y Tunnel ID"; exit 1; }
echo "‚úÖ Tunnel ID: $TUNNEL_ID"

# X·ª≠ l√Ω credentials file
CRED_FILE="$ROOT_DIR/cloudflared/${TUNNEL_ID}.json"
if [ ! -f "$CRED_FILE" ]; then
    echo "üîë Sao ch√©p credentials file..."
    cp ~/.cloudflared/${TUNNEL_ID}.json "$CRED_FILE" || { echo "‚ùå Kh√¥ng t√¨m th·∫•y credentials file"; exit 1; }
fi

# T·∫°o file .env
echo "üìù T·∫°o file c·∫•u h√¨nh .env..."
cat <<EOL > .env
N8N_PROTOCOL=https
N8N_HOST=$DOMAIN
N8N_EDITOR_BASE_URL=https://$DOMAIN
WEBHOOK_URL=https://$DOMAIN
N8N_SECURE_COOKIE=false
GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
N8N_BASIC_AUTH_ACTIVE=false
CLOUDFLARED_TUNNEL_TOKEN=$(cloudflared tunnel token "$CLOUDFLARE_TUNNEL_NAME")
EOL

# Docker Compose configuration
echo "üê≥ T·∫°o file docker-compose.yml..."
cat <<EOL > docker-compose.yml
version: '3.8'

services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    env_file: .env
    networks:
      - cf_network

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=\${CLOUDFLARED_TUNNEL_TOKEN}
    volumes:
      - ./cloudflared:/etc/cloudflared
    networks:
      - cf_network

networks:
  cf_network:
    driver: bridge
EOL

# X·ª≠ l√Ω config.yml
CONFIG_FILE="cloudflared/config.yml"
echo "üîß X·ª≠ l√Ω file c·∫•u h√¨nh Cloudflared..."
if [ -f "$CONFIG_FILE" ]; then
    echo "üîÑ Ph√°t hi·ªán config.yml ƒë√£ t·ªìn t·∫°i, ƒëang c·∫≠p nh·∫≠t..."
    
    # Ki·ªÉm tra hostname ƒë√£ t·ªìn t·∫°i
    if grep -q "hostname: $DOMAIN" "$CONFIG_FILE"; then
        echo "‚úÖ Hostname ƒë√£ t·ªìn t·∫°i trong config.yml"
    else
        # Th√™m hostname m·ªõi v√†o tr∆∞·ªõc rule 404
        sed -i '/http_status:404/i \
  - hostname: '"$DOMAIN"'\
    service: http://n8n:5678' "$CONFIG_FILE"
        echo "‚úÖ ƒê√£ th√™m hostname m·ªõi v√†o config.yml"
    fi
else
    echo "üÜï T·∫°o config.yml m·ªõi..."
    cat <<EOL > "$CONFIG_FILE"
tunnel: $TUNNEL_ID
credentials-file: /etc/cloudflared/$TUNNEL_ID.json
ingress:
  - hostname: $DOMAIN
    service: http://n8n:5678
  - service: http_status:404
EOL
fi

# X·ª≠ l√Ω DNS Records
echo "üîó X·ª≠ l√Ω b·∫£n ghi DNS..."
ZONE_INFO=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones" \
  -H "Authorization: Bearer ${CF_API_TOKEN}" \
  -H "Content-Type: application/json")

ZONE_ID=$(echo "$ZONE_INFO" | jq -r --arg domain "$DOMAIN" '.result[] | select(.name == $domain | .id)')

if [ -z "$ZONE_ID" ] || [ "$ZONE_ID" = "null" ]; then
    echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Zone ID cho domain ch√≠nh, th·ª≠ t√¨m zone cha..."
    DOMAIN_PARTS=(${DOMAIN//./ })
    PARENT_DOMAIN="${DOMAIN_PARTS[-2]}.${DOMAIN_PARTS[-1]}"
    ZONE_ID=$(echo "$ZONE_INFO" | jq -r --arg domain "$PARENT_DOMAIN" '.result[] | select(.name == $domain) | .id')
fi

if [ -n "$ZONE_ID" ] && [ "$ZONE_ID" != "null" ]; then
    echo "üîç Ki·ªÉm tra b·∫£n ghi DNS cho $DOMAIN..."
    DNS_CHECK=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records?name=${DOMAIN}" \
      -H "Authorization: Bearer ${CF_API_TOKEN}" \
      -H "Content-Type: application/json")
    
    if [ $(echo "$DNS_CHECK" | jq '.result | length') -eq 0 ]; then
        echo "üÜï T·∫°o b·∫£n ghi CNAME m·ªõi..."
        CREATE_DNS=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records" \
          -H "Authorization: Bearer ${CF_API_TOKEN}" \
          -H "Content-Type: application/json" \
          --data '{
              "type":"CNAME",
              "name":"'"${DOMAIN}"'",
              "content":"'"${TUNNEL_ID}.cfargotunnel.com"'",
              "ttl":120,
              "proxied":true
          }')
        
        if [ $(echo "$CREATE_DNS" | jq '.success') = "true" ]; then
            echo "‚úÖ ƒê√£ t·∫°o b·∫£n ghi DNS th√†nh c√¥ng!"
        else
            echo "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o b·∫£n ghi DNS: $(echo "$CREATE_DNS" | jq '.errors')"
        fi
    else
        echo "‚úÖ B·∫£n ghi DNS ƒë√£ t·ªìn t·∫°i"
    fi
else
    echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Zone ID ph√π h·ª£p, b·ªè qua t·∫°o DNS Record"
fi

# Kh·ªüi ƒë·ªông h·ªá th·ªëng
echo "üöÄ Kh·ªüi ƒë·ªông containers..."
docker-compose down
docker-compose up -d --force-recreate

echo "‚ú® C√†i ƒë·∫∑t ho√†n t·∫•t!"
echo "üëâ Truy c·∫≠p: https://$DOMAIN sau v√†i ph√∫t"
echo "üîß Ki·ªÉm tra tr·∫°ng th√°i tunnel: docker logs cloudflared"
